---
description: 
globs: 
alwaysApply: true
---
You are an expert in Python and FastAPI, focused on building simple, clear, and maintainable APIs.

## Core Philosophy

- **Simplicity and Clarity**: The primary goal is to maintain a simple and clear codebase. Avoid over-engineering. New features or changes should be easy to understand and implement.
- **Pragmatism over Dogma**: While we follow best practices, we prioritize what makes the code easier to read, test, and maintain for this specific project.
- **Code is for Humans**: Write code that is readable and self-explanatory. Use descriptive names for variables and functions.

## Project Structure

Our backend follows a clear, feature-oriented structure. When adding or modifying code, adhere to this organization:

- `main.py`: The entry point of the application. It initializes the FastAPI app and includes the API routers.
- `app/api/`: Contains all API endpoints, organized into routers by domain (e.g., `projects.py`, `users.py`).
- `app/crud.py`: Holds all the business logic and database operations (Create, Read, Update, Delete). This is the bridge between the API layer and the database.
- `app/models.py`: Defines the SQLAlchemy database models.
- `app/schemas.py`: Contains the Pydantic models used for data validation, serialization, and API request/response shapes.
- `app/database.py`: Manages the database connection and session.
- `app/dependencies.py`: Includes FastAPI dependency injection functions, such as getting the current user.

## Coding Guidelines

### General
- **Type Hinting**: Use type hints for all function signatures. This is crucial for static analysis and editor support.
- **Pydantic Everywhere**: Use Pydantic models (`schemas.py`) for all API inputs and outputs. Do not use raw dictionaries.
- **Configuration**: All configuration should be managed via `pydantic-settings` in `config.py`. Avoid hardcoding values.
- **Dependencies**: Manage dependencies in `requirements.txt`.

### FastAPI
- **Synchronous Operations**: Our current database setup (`psycopg2`) is synchronous. Therefore, standard `def` functions should be used for route handlers and CRUD operations that interact with the database.
- **Dependency Injection**: Use FastAPI's dependency injection system (`Depends`) for accessing shared resources like database sessions and authenticated user information. See `dependencies.py` for examples.
- **Routers**: Group related endpoints into `APIRouter` instances within the `app/api/` directory.

### Error Handling
- **Use HTTPException for Client Errors**: For expected errors that the client can handle (e.g., item not found, invalid input), raise `HTTPException` with a clear detail message and appropriate status code.
- **Early Returns / Guard Clauses**: Check for errors, invalid data, or failed preconditions at the beginning of your functions and return early. This keeps the main logic clean and avoids nested `if` statements.

```python
# Good: Early return
def get_project(project_id: int, db: Session):
    if project_id <= 0:
        raise HTTPException(status_code=400, detail="Invalid project ID")
    
    project = db.query(models.Project).filter(models.Project.id == project_id).first()
    if not project:
        raise HTTPException(status_code=404, detail="Project not found")
    
    return project
```

## Future Improvements
While the current setup prioritizes simplicity, we aim to make targeted improvements. A key area for future work is performance.

- **Asynchronous Database Operations**: The next major performance enhancement will be to migrate from `psycopg2-binary` to an async driver like `asyncpg` and refactor database operations in `crud.py` and `database.py` to be fully asynchronous (`async def`). 